#!/usr/bin/env python

import xml.etree.ElementTree as ET
import os
import sys
import argparse
from shutil import copy

from PIL import Image, ExifTags

metadata = {}

def parse_xml(image):
    with Image.open(image) as im:
        for segment, content in im.applist:
            marker, body = content.split(b'\x00', 1)
            if segment == 'APP1' and marker == b'http://ns.adobe.com/xap/1.0/':
                data = body.decode('"utf-8"')
    return ET.ElementTree(ET.fromstring(data))

def parse_subject_tags(tree):
    nmspdict = {'x':'adobe:ns:meta/',
                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
                'dc': 'http://purl.org/dc/elements/1.1/'}

    tags = tree.findall('rdf:RDF/rdf:Description/dc:subject/rdf:Bag/rdf:li', namespaces = nmspdict)

    return ([tag.text.lower() for tag in tags])

def parse_microsoft_tags(tree):
    nmspdict = {'x':'adobe:ns:meta/',
                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
                'MicrosoftPhoto': 'http://ns.microsoft.com/photo/1.0/'}

    tags = tree.findall('rdf:RDF/rdf:Description/MicrosoftPhoto:LastKeywordXMP/rdf:Bag/rdf:li', namespaces = nmspdict)

    if len(tags) > 0:
        return [tag.lower() for tag in tags[0].text.split(',')]

    return []

def get_tags(image):
    xml = parse_xml(image)

    global metadata

    for t in parse_subject_tags(xml):
        metadata.setdefault(t, []).append(image)

    for t in parse_microsoft_tags(xml):
        metadata.setdefault(t, []).append(image)

if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument("directory", help="source folder with images to be parsed.", type=str)
    parser.add_argument("-m", "--minimum", help="set the minimum number of images for a tag to be proceesed.", type=int, default=0)
    parser.add_argument("-o", "--output", help="create one folder per tag with all images inside", type=str, default=None)
    parser.add_argument("-v", "--verbose", help="increase verbosity level", action="store_true")
    parser.add_argument("-p", "--print", help="print out the list of tags and images on stdout.", action="store_true")
    args = parser.parse_args()

    limit = args.minimum
    output = args.output

    for root, dirs, files in os.walk(args.directory):
        for f in files:
            filename = os.path.join(root, f)
            try:
                get_tags(filename)
            except:
                print("Ops! No metadata found on file: ", filename)

    for k in sorted(metadata, key=lambda k: len(metadata[k]), reverse=True):
        if len(metadata[k]) >= limit:
            if args.output:
                try:
                    os.makedirs(os.path.join(output,k))
                except:
                    pass
                for f in metadata[k]:
                    if args.verbose: print("Copying ", f, os.path.join(output, k))
                    copy(f, os.path.join(output, k))
            if args.print:
                print('{0} ({1}) {2}'.format(k, len(metadata[k]), metadata[k]))

